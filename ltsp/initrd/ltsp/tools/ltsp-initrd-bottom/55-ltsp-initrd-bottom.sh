# This file is part of LTSP, https://ltsp.github.io
# Copyright 2019 the LTSP team, see AUTHORS
# SPDX-License-Identifier: GPL-3.0-or-later

# Add live (overlay) support to initramfs-tools

main() {
    warn "Starting $LTSP_TOOL"
    import_netinfo
    # writeable || overlay_root
    # patch_networking
    # patch_root
    set_init
    # Move ltsp to /run to make it available after pivot_root
    mv /ltsp /run/ltsp
}

# Get initramfs networking information into our own variables
import_netinfo() {
    local v script

    # Keep everything in space-separated lists
    if [ -z "$LTSP_MACS" ]; then
        while read -r iface mac <&3; do
            LTSP_MACS="$LTSP_MACS $mac"
        done 3<<EOF
$(ip -o link show |
    sed -n 's|[^ ]* *\([^:]*\).*link/ether *\([^ ]*\) .*|\1 \2|p')
EOF
        # Remove initial space
        LTSP_MACS=${LTSP_MACS# }
    fi

    if [ -z "$LTSP_IPS" ]; then
        while read -r ip <&3; do
            case "$ip" in
                127.0.0.1|::1) ;;
                *) LTSP_IPS="$LTSP_IPS $ip" ;;
            esac
        done 3<<EOF
$(ip -o address show |
    sed -n 's|[^ ]* [^ ]* *inet[^ ]* * \([^ /]*\).*|\1|p')
EOF
        LTSP_IPS=${LTSP_IPS# }
    fi

    if [ -z "$LTSP_SERVER" ] && [ -n "$LTSP_IPS" ]; then
        # Now we want to detect the LTSP server.
        # ROOTSERVER may be invalid in case of proxyDHCP.
        # `ps -fC nbd-client` doesn't work as it's just a kernel thread.
        # It may be available in /proc/cmdline, but it's complex to check
        # for all the variations of ip=, root=, netroot=, nbdroot= etc.
        # So if we have ONE TCP connection, assume it's the server.
        LTSP_SERVER=$(netstat -tun | sed -n 's|^tcp[^ ]* *[^ ]* *[^ ]* *[^ ]* *\([^ ]*\):[0-9]* .*|\1|p')
        if [ "$(expr match "$LTSP_SERVER" '[0-9a-f:.]*')" = "${#LTSP_SERVER}" ]; then
            # We need $LTSP_IFACE for network-manager blacklisting
            LTSP_IFACE=$(ip -o route get $LTSP_SERVER | sed -n 's|.* *dev *\([^ ]*\) .*|\1|p')
        else
            unset LTSP_SERVER
        fi
    fi
}

writeable() {
    chroot "$rootmnt" /usr/bin/test -w / && return 0
    mount -o remount,rw "$rootmnt"
    chroot "$rootmnt" /usr/bin/test -w / && return 0
    return 1
}

modprobe_overlay() {
    grep -q overlay /proc/filesystems &&
        return 0
    modprobe overlay &&
        grep -q overlay /proc/filesystems &&
        return 0
    insmod "$rootmnt/lib/modules/$(uname -r)/kernel/fs/overlayfs/overlay.ko" &&
        grep -q overlay /proc/filesystems &&
        return 0
    debug_shell "Couldn't modprobe overlay!"
}

overlay_root() {
    modprobe_overlay
    mkdir -p /run/initramfs/rofs /run/initramfs/cow
    mount -o move "$rootmnt" /run/initramfs/rofs
    mount -t tmpfs -o mode=0755 tmpfs /run/initramfs/cow
    mkdir -p /run/initramfs/cow/up /run/initramfs/cow/work
    mount -t overlay -o upperdir=/run/initramfs/cow/up,lowerdir=/run/initramfs/rofs,workdir=/run/initramfs/cow/work overlay "$rootmnt"
}

patch_networking() {
    # TODO: this is initramfs-tools specific
    grep -Eqw 'root=/dev/nbd.*|root=/dev/nfs' /proc/cmdline || return 0
    . /run/net-*.conf
    # prohibit network-manager from messing with the boot interface
    printf "%s" "[keyfile]
unmanaged-devices=interface-name:$DEVICE
" > "$rootmnt/etc/NetworkManager/conf.d/ltsp.conf"
    printf "%s" "# Dynamically generated by LTSP.
auto lo
iface lo inet loopback

auto $DEVICE
iface $DEVICE inet manual
" > "$rootmnt/etc/network/interfaces"
    # Never ifdown anything. Safer! :P
    ln -sf ../bin/true "$rootmnt/sbin/ifdown"
}

patch_root() {
    printf "# Empty fstab generated by LTSP.\n" > "$rootmnt/etc/fstab"
    if grep -qs 'AutomaticLoginEnable.*=' "$rootmnt/etc/gdm3/daemon.conf"; then
        sed -e 's/.*AutomaticLoginEnable[ ]*=.*/AutomaticLoginEnable = True/' \
            -e 's/.*AutomaticLogin[ ]*=.*/AutomaticLogin = administrator/' \
            -i "$rootmnt/etc/gdm3/daemon.conf"
    fi
    # return 0
    # Test automatic reboots, for stability!
    printf '#!/bin/sh
echo "This is RC LOCAL!" >&2
echo "This is RC LOCAL!"
# sleep 30  #  Cups does not like quick reboots and delays
# Systemd unit "Make remote CUPS printers available locally",
# sometimes needs 25 secs on NBD, 60 on NFS, with timeout=90
# reboot
' > "$rootmnt/etc/rc.local"
    chmod +x "$rootmnt/etc/rc.local"
}

set_init() {
    # We can't use /run as it's mounted noexec. Mount --bind over the real init!
    real_init=$(readlink -f "$rootmnt/sbin/init" || readlink "$rootmnt/sbin/init")
    cp -a /ltsp/init /dev/init-ltsp && mount --bind /dev/init-ltsp "$rootmnt/$real_init"
    # mount --bind /ltsp/init "$rootmnt/$real_init"
    # ΕΔΩ - OK this works; but I can't unmount it as it's busy;
    # but I can `mount --move` it over /dev/init-ltsp; so all fine!
}
